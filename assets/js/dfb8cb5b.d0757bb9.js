"use strict";(self.webpackChunkth_ws=self.webpackChunkth_ws||[]).push([[5405],{3097:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>a,contentTitle:()=>c,default:()=>h,frontMatter:()=>o,metadata:()=>t,toc:()=>d});const t=JSON.parse('{"id":"my-docs/extras/reads_3","title":"Git Commit Best Practices","description":"A good Git commit is essential for collaboration with other developers, tracking changes and documenting the changes made in a project. Here are the best practices for writing an effective commit message.","source":"@site/docs/my-docs/extras/reads_3.md","sourceDirName":"my-docs/extras","slug":"/my-docs/extras/reads_3","permalink":"/tianhom/docs/my-docs/extras/reads_3","draft":false,"unlisted":false,"editUrl":"https://github.com/tianhom0919/tianhom/tree/main/th-ws/docs/my-docs/extras/reads_3.md","tags":[],"version":"current","sidebarPosition":3,"frontMatter":{"sidebar_position":3},"sidebar":"mydocsSidebar","previous":{"title":"Stacks and Recursion","permalink":"/tianhom/docs/my-docs/extras/reads_2"},"next":{"title":"Patch Files","permalink":"/tianhom/docs/my-docs/extras/reads_4"}}');var i=s(4848),r=s(8453);const o={sidebar_position:3},c="Git Commit Best Practices",a={},d=[{value:"Structuring Commit Messages",id:"structuring-commit-messages",level:2},{value:"Consistent Formatting",id:"consistent-formatting",level:2},{value:"Example of a Good Commit Message",id:"example-of-a-good-commit-message",level:2}];function l(e){const n={admonition:"admonition",code:"code",em:"em",h1:"h1",h2:"h2",header:"header",hr:"hr",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,r.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.header,{children:(0,i.jsx)(n.h1,{id:"git-commit-best-practices",children:"Git Commit Best Practices"})}),"\n",(0,i.jsx)(n.p,{children:"A good Git commit is essential for collaboration with other developers, tracking changes and documenting the changes made in a project. Here are the best practices for writing an effective commit message."}),"\n",(0,i.jsx)(n.h2,{id:"structuring-commit-messages",children:"Structuring Commit Messages"}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Subject"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"A short summary of the changes made (10 characters or less)"}),"\n",(0,i.jsxs)(n.li,{children:['Written in imperative mood, e.g. "',(0,i.jsx)(n.em,{children:"Add new Markdown docs"}),'" instead of "',(0,i.jsx)(n.em,{children:"Added new Markdown docs"}),'"']}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Body (Optional)"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"A more detailed explanation of the change"}),"\n",(0,i.jsx)(n.li,{children:"Explain why the change was necessary and how it solves the problem"}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Footer (Optional)"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Metadata such as issue references, breaking changes, etc"}),"\n",(0,i.jsxs)(n.li,{children:["Example: ",(0,i.jsx)(n.code,{children:"Closes #123"}),", ",(0,i.jsx)(n.code,{children:"BREAKING CHANGE: Update API signature"})]}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:"A commit should address one logical change or purpose."}),"\n",(0,i.jsx)(n.p,{children:"You should also avoid bundling unrelated changes in one commit."}),"\n",(0,i.jsx)(n.admonition,{type:"tip",children:(0,i.jsxs)(n.p,{children:["Make messages easy to understand for both current and future contributors and avoid vague phrases like ",(0,i.jsx)(n.em,{children:'"fix bugs"'})," or ",(0,i.jsx)(n.em,{children:'"update files"'}),". Instead, ",(0,i.jsx)(n.em,{children:'"Fix null pointer exception in user authentication"'}),"."]})}),"\n",(0,i.jsx)(n.h2,{id:"consistent-formatting",children:"Consistent Formatting"}),"\n",(0,i.jsx)(n.p,{children:"Examples of subject prefixes for clarity:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"feat"}),": for new features (e.g. ",(0,i.jsx)(n.code,{children:"feat: Add user login support"}),")"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"fix"}),": for bug fixes (e.g. ",(0,i.jsx)(n.code,{children:"fix: Correct typo in README"}),")"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"docs"}),": for documentation updates"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"style"}),": for formatting/code style (e.g. spaces, indentation)"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"refactor"}),": for code restructuring without functionality changes"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"test"}),": for adding/modifying tests"]}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:"Include a ticket number or issue reference when applicable."}),"\n",(0,i.jsxs)(n.p,{children:["Example: ",(0,i.jsx)(n.code,{children:"fix: Resolve crash when loading profile (#45)"})]}),"\n",(0,i.jsx)(n.admonition,{type:"warning",children:(0,i.jsx)(n.p,{children:"Ensure the changes are tested thoroughly and works as intended before commiting!"})}),"\n",(0,i.jsx)(n.h2,{id:"example-of-a-good-commit-message",children:"Example of a Good Commit Message"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:"feat: Add user authentication to the API\r\n\r\nAdd JWT-based user authentication to secure the API. \r\nThis implementation includes:\r\n- User login endpoint\r\n- Middleware for token verification\r\n- Token refresh functionality\r\n\r\nCloses #234\n"})}),"\n",(0,i.jsx)(n.p,{children:"By following these practices, you ensure that your commit history is meaningful and maintains high-quality documentation for the project."}),"\n",(0,i.jsx)(n.hr,{})]})}function h(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(l,{...e})}):l(e)}},8453:(e,n,s)=>{s.d(n,{R:()=>o,x:()=>c});var t=s(6540);const i={},r=t.createContext(i);function o(e){const n=t.useContext(r);return t.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function c(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:o(e.components),t.createElement(r.Provider,{value:n},e.children)}}}]);