"use strict";(self.webpackChunkth_ws=self.webpackChunkth_ws||[]).push([[4823],{911:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>c,contentTitle:()=>a,default:()=>h,frontMatter:()=>o,metadata:()=>i,toc:()=>d});const i=JSON.parse('{"id":"my-tutorials/week-4/4-6","title":"4-6 Introduction to RZ/G2L GPIOs","description":"This chapter demonstrates how to test and develop programs to control the GPIO hardware pins on the Renesas RZ/G2L platform within a Linux environment. It covers using Linux Sysfs to manage GPIOs via file-based read/write commands.","source":"@site/docs/my-tutorials/week-4/4-6.md","sourceDirName":"my-tutorials/week-4","slug":"/my-tutorials/week-4/4-6","permalink":"/tianhom/docs/my-tutorials/week-4/4-6","draft":false,"unlisted":false,"editUrl":"https://github.com/tianhom0919/tianhom/tree/main/th-ws/docs/my-tutorials/week-4/4-6.md","tags":[],"version":"current","sidebarPosition":6,"frontMatter":{"sidebar_position":6},"sidebar":"tutorialSidebar","previous":{"title":"4-5 Build Executables for RZ/G2L","permalink":"/tianhom/docs/my-tutorials/week-4/4-5"}}');var t=s(4848),r=s(8453);const o={sidebar_position:6},a="4-6 Introduction to RZ/G2L GPIOs",c={},d=[{value:"Linux Sysfs",id:"linux-sysfs",level:2},{value:"Accessing GPIO Pins",id:"accessing-gpio-pins",level:2},{value:"Controlling GPIO Pins",id:"controlling-gpio-pins",level:2}];function l(e){const n={a:"a",admonition:"admonition",code:"code",em:"em",h1:"h1",h2:"h2",header:"header",p:"p",pre:"pre",strong:"strong",...(0,r.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.header,{children:(0,t.jsx)(n.h1,{id:"4-6-introduction-to-rzg2l-gpios",children:"4-6 Introduction to RZ/G2L GPIOs"})}),"\n",(0,t.jsx)(n.p,{children:"This chapter demonstrates how to test and develop programs to control the GPIO hardware pins on the Renesas RZ/G2L platform within a Linux environment. It covers using Linux Sysfs to manage GPIOs via file-based read/write commands."}),"\n",(0,t.jsx)(n.h2,{id:"linux-sysfs",children:"Linux Sysfs"}),"\n",(0,t.jsx)(n.p,{children:"Sysfs is a pseudo-filesystem in Linux that provides a way to interact with kernel subsystems, hardware devices, and drivers via virtual files."}),"\n",(0,t.jsx)(n.p,{children:"To read a file, use the following command:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"cat filename\n"})}),"\n",(0,t.jsx)(n.p,{children:"To write to a file, use:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"echo xxx > filename\n"})}),"\n",(0,t.jsx)(n.h2,{id:"accessing-gpio-pins",children:"Accessing GPIO Pins"}),"\n",(0,t.jsxs)(n.p,{children:["To access GPIO privileges on the RZ/G2L broad, navigate to ",(0,t.jsx)(n.code,{children:"/sys/class/gpio/"})," and export the desired GPIO pin ID:"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"echo gpio-pin-id > export\n"})}),"\n",(0,t.jsxs)(n.admonition,{type:"tip",children:[(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Renesas GPIO Pin ID"})}),(0,t.jsxs)(n.p,{children:["GPIO Pin IDs are calculated based on the port and pin as outlined in page 8 of ",(0,t.jsx)(n.a,{target:"_blank","data-noBrokenLinkCheck":!0,href:s(6024).A+"",children:"Renesas GPIO documentation"}),". For RZ/G2L, the formula is shown below:"]}),(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{children:"GPIO ID = (Port Number * 8) + Pin Number + 120\n"})}),(0,t.jsxs)(n.p,{children:["For ",(0,t.jsxs)(n.strong,{children:["P42_4 (",(0,t.jsx)(n.em,{children:"Port 42, Pin 4"}),")"]}),":"]}),(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{children:"GPIO ID = (42 * 8) + 4 + 120 = 460\n"})})]}),"\n",(0,t.jsxs)(n.p,{children:["After exporting the pins, a directory named after your pin (e.g. P42_4) will be created under the ",(0,t.jsx)(n.code,{children:"/sys/class/gpio/"})," directory. Enter into the directory and use the command ",(0,t.jsx)(n.code,{children:"ls"})," to list all the files."]}),"\n",(0,t.jsx)(n.p,{children:"Example output:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{children:"active_low  device  direction  edge  power  subsystem  uevent  value\n"})}),"\n",(0,t.jsx)(n.h2,{id:"controlling-gpio-pins",children:"Controlling GPIO Pins"}),"\n",(0,t.jsxs)(n.p,{children:["To control GPIO pins, please ensure that you are in the ",(0,t.jsx)(n.code,{children:"sys/class/gpio"})," directory."]}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Setting Pin Direction"})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:'echo "out" > direction\necho "in" > direction\n'})}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Writing Values To Pin"})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"echo 1 > value\necho 0 > value\n"})}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Reading The Pin State"})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"cat value\n"})})]})}function h(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(l,{...e})}):l(e)}},6024:(e,n,s)=>{s.d(n,{A:()=>i});const i=s.p+"assets/files/R01US0405EJ0111_GPIO_UME_v1.11-be60a1b47a9c51e43da10df045dfb584.pdf"},8453:(e,n,s)=>{s.d(n,{R:()=>o,x:()=>a});var i=s(6540);const t={},r=i.createContext(t);function o(e){const n=i.useContext(r);return i.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:o(e.components),i.createElement(r.Provider,{value:n},e.children)}}}]);