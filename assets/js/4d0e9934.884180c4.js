"use strict";(self.webpackChunkth_ws=self.webpackChunkth_ws||[]).push([[985],{3939:(e,r,n)=>{n.r(r),n.d(r,{assets:()=>o,contentTitle:()=>s,default:()=>m,frontMatter:()=>t,metadata:()=>a,toc:()=>l});const a=JSON.parse('{"id":"my-tutorials/mcut-tutorials/week-6/6-4","title":"6-4 Circle and Face Detection Using OpenCV","description":"This tutorial provides an overview and practical examples for implementing circle and face detection using OpenCV in both C++ and Python.","source":"@site/docs/my-tutorials/mcut-tutorials/week-6/6-4.md","sourceDirName":"my-tutorials/mcut-tutorials/week-6","slug":"/my-tutorials/mcut-tutorials/week-6/6-4","permalink":"/tianhom/docs/my-tutorials/mcut-tutorials/week-6/6-4","draft":false,"unlisted":false,"editUrl":"https://github.com/tianhom0919/tianhom/tree/main/th-ws/docs/my-tutorials/mcut-tutorials/week-6/6-4.md","tags":[],"version":"current","sidebarPosition":4,"frontMatter":{"sidebar_position":4},"sidebar":"tutorialSidebar","previous":{"title":"6-3 Camera Control Using Video4Linux","permalink":"/tianhom/docs/my-tutorials/mcut-tutorials/week-6/6-3"},"next":{"title":"Other Tutorials","permalink":"/tianhom/docs/category/other-tutorials"}}');var c=n(4848),i=n(8453);const t={sidebar_position:4},s="6-4 Circle and Face Detection Using OpenCV",o={},l=[{value:"Circle Detection with HoughCircles",id:"circle-detection-with-houghcircles",level:2},{value:"Example C++ Code: Detecting Circles from Camera",id:"example-c-code-detecting-circles-from-camera",level:3},{value:"Suggested Development Flow",id:"suggested-development-flow",level:3},{value:"Face Detection with Haar Cascades",id:"face-detection-with-haar-cascades",level:2},{value:"C++ Example: Face and Eye Detection",id:"c-example-face-and-eye-detection",level:3}];function d(e){const r={admonition:"admonition",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",hr:"hr",p:"p",pre:"pre",strong:"strong",...(0,i.R)(),...e.components};return(0,c.jsxs)(c.Fragment,{children:[(0,c.jsx)(r.header,{children:(0,c.jsx)(r.h1,{id:"6-4-circle-and-face-detection-using-opencv",children:"6-4 Circle and Face Detection Using OpenCV"})}),"\n",(0,c.jsx)(r.p,{children:"This tutorial provides an overview and practical examples for implementing circle and face detection using OpenCV in both C++ and Python."}),"\n",(0,c.jsx)(r.hr,{}),"\n",(0,c.jsx)(r.h2,{id:"circle-detection-with-houghcircles",children:"Circle Detection with HoughCircles"}),"\n",(0,c.jsx)(r.p,{children:"To detect circles in images, OpenCV offers the HoughCircles function. This method works by converting the image into a parameter space where circles are identified based on their center coordinates and radius."}),"\n",(0,c.jsx)(r.p,{children:(0,c.jsxs)(r.strong,{children:[(0,c.jsx)(r.code,{children:"cv::HoughCircles"})," Syntax:"]})}),"\n",(0,c.jsx)(r.pre,{children:(0,c.jsx)(r.code,{className:"language-cpp",children:"void cv::HoughCircles(\r\n    InputArray image,\r\n    OutputArray circles,\r\n    int method,\r\n    double dp,          // Inverse ratio of accumulator resolution to image resolution\r\n    double minDist,     // Minimum distance between circle centers\r\n    double param1 = 100, // Canny high threshold\r\n    double param2 = 100, // Accumulator threshold\r\n    int minRadius = 0,\r\n    int maxRadius = 0\r\n);\n"})}),"\n",(0,c.jsx)(r.admonition,{type:"tip",children:(0,c.jsxs)(r.p,{children:["Tune ",(0,c.jsx)(r.code,{children:"minDist"}),", ",(0,c.jsx)(r.code,{children:"param1"}),", and ",(0,c.jsx)(r.code,{children:"param2"})," to improve detection accuracy. Use ",(0,c.jsx)(r.code,{children:"minRadius"})," and ",(0,c.jsx)(r.code,{children:"maxRadius"})," to filter specific circle sizes."]})}),"\n",(0,c.jsx)(r.h3,{id:"example-c-code-detecting-circles-from-camera",children:"Example C++ Code: Detecting Circles from Camera"}),"\n",(0,c.jsx)(r.pre,{children:(0,c.jsx)(r.code,{className:"language-cpp",children:'#include <opencv2/opencv.hpp>\r\n#include <iostream>\r\n\r\nusing namespace cv;\r\nusing namespace std;\r\n\r\nint main() {\r\n    VideoCapture cap(0);\r\n    if (!cap.isOpened()) {\r\n        cerr << "Error: Could not open camera." << endl;\r\n        return -1;\r\n    }\r\n\r\n    Mat frame, gray;\r\n    while (true) {\r\n        cap >> frame;\r\n        if (frame.empty()) break;\r\n\r\n        cvtColor(frame, gray, COLOR_BGR2GRAY);\r\n        GaussianBlur(gray, gray, Size(9, 9), 2, 2);\r\n\r\n        vector<Vec3f> circles;\r\n        HoughCircles(gray, circles, HOUGH_GRADIENT, 1, gray.rows / 16, 100, 30, 10, 100);\r\n\r\n        for (size_t i = 0; i < circles.size(); i++) {\r\n            Point center(cvRound(circles[i][0]), cvRound(circles[i][1]));\r\n            int radius = cvRound(circles[i][2]);\r\n            circle(frame, center, radius, Scalar(0, 255, 0), 2);\r\n            circle(frame, center, 2, Scalar(0, 0, 255), 3);\r\n        }\r\n\r\n        imshow("Circle Detection", frame);\r\n        if (waitKey(30) == 27) break;\r\n    }\r\n\r\n    cap.release();\r\n    return 0;\r\n}\n'})}),"\n",(0,c.jsx)(r.p,{children:"Build Instructions:"}),"\n",(0,c.jsx)(r.pre,{children:(0,c.jsx)(r.code,{className:"language-bash",children:"mkdir build\r\ncd build\r\ncmake ..\r\nmake\n"})}),"\n",(0,c.jsx)(r.h3,{id:"suggested-development-flow",children:"Suggested Development Flow"}),"\n",(0,c.jsx)(r.p,{children:"Due to the variability of camera input, start development using still images, then videos, and finally move to live camera feeds."}),"\n",(0,c.jsx)(r.p,{children:"Stage 1: Image Input"}),"\n",(0,c.jsx)(r.pre,{children:(0,c.jsx)(r.code,{className:"language-cpp",children:'Mat image = imread("image.jpg");\r\nif (!image.data) {\r\n    cerr << "No image data\\n";\r\n    return -1;\r\n}\r\nimshow("Display Image", image);\r\nwaitKey(0);\n'})}),"\n",(0,c.jsx)(r.p,{children:"Stage 2: Video Input"}),"\n",(0,c.jsx)(r.pre,{children:(0,c.jsx)(r.code,{className:"language-cpp",children:'VideoCapture cap("video.mp4");\r\nif (!cap.isOpened()) {\r\n    cerr << "Error: Could not open video." << endl;\r\n    return -1;\r\n}\r\n\r\nMat frame;\r\nwhile (true) {\r\n    cap >> frame;\r\n    if (frame.empty()) break;\r\n    // Process frame...\r\n    if (waitKey(30) == 27) break;\r\n}\n'})}),"\n",(0,c.jsx)(r.p,{children:"Stage 3: Live Camera"}),"\n",(0,c.jsx)(r.pre,{children:(0,c.jsx)(r.code,{className:"language-cpp",children:'VideoCapture cap(0);\r\nif (!cap.isOpened()) {\r\n    cerr << "Error: Could not open camera." << endl;\r\n    return -1;\r\n}\r\n\r\nMat frame;\r\nwhile (true) {\r\n    cap >> frame;\r\n    if (frame.empty()) break;\r\n    // Process frame...\r\n    if (waitKey(30) == 27) break;\r\n}\n'})}),"\n",(0,c.jsx)(r.hr,{}),"\n",(0,c.jsx)(r.h2,{id:"face-detection-with-haar-cascades",children:"Face Detection with Haar Cascades"}),"\n",(0,c.jsx)(r.p,{children:"Face detection is implemented using Haar feature-based cascade classifiers trained with positive and negative images."}),"\n",(0,c.jsx)(r.p,{children:"Python Example: Face Detection"}),"\n",(0,c.jsx)(r.pre,{children:(0,c.jsx)(r.code,{className:"language-python",children:'import cv2\r\n\r\ndef detectFace(img):\r\n    filename = img.split(".")[0]\r\n    img = cv2.imread(img)\r\n    grayImg = cv2.cvtColor(img, cv2.COLOR_BGR2GRAY)\r\n    color = (0, 255, 0)\r\n\r\n    face_classifier = cv2.CascadeClassifier(cv2.data.haarcascades + "haarcascade_frontalface_default.xml")\r\n    faces = face_classifier.detectMultiScale(grayImg, scaleFactor=1.2, minNeighbors=3, minSize=(32, 32))\r\n\r\n    for (x, y, w, h) in faces:\r\n        cv2.rectangle(img, (x, y), (x + w, y + h), color, 2)\r\n\r\n    cv2.imwrite(filename + "_face.jpg", img)\r\n\r\ndetectFace(\'human.jpg\')\n'})}),"\n",(0,c.jsx)(r.h3,{id:"c-example-face-and-eye-detection",children:"C++ Example: Face and Eye Detection"}),"\n",(0,c.jsx)(r.pre,{children:(0,c.jsx)(r.code,{className:"language-cpp",children:'#include <opencv2/opencv.hpp>\r\nusing namespace cv;\r\nusing namespace std;\r\n\r\nCascadeClassifier face_cascade, eyes_cascade;\r\n\r\nvoid detectAndDisplay(Mat frame) {\r\n    Mat gray;\r\n    cvtColor(frame, gray, COLOR_BGR2GRAY);\r\n    equalizeHist(gray, gray);\r\n\r\n    vector<Rect> faces;\r\n    face_cascade.detectMultiScale(gray, faces);\r\n\r\n    for (size_t i = 0; i < faces.size(); i++) {\r\n        Point center(faces[i].x + faces[i].width/2, faces[i].y + faces[i].height/2);\r\n        ellipse(frame, center, Size(faces[i].width/2, faces[i].height/2), 0, 0, 360, Scalar(255, 0, 255), 4);\r\n\r\n        Mat faceROI = gray(faces[i]);\r\n        vector<Rect> eyes;\r\n        eyes_cascade.detectMultiScale(faceROI, eyes);\r\n\r\n        for (size_t j = 0; j < eyes.size(); j++) {\r\n            Point eye_center(faces[i].x + eyes[j].x + eyes[j].width/2,\r\n                             faces[i].y + eyes[j].y + eyes[j].height/2);\r\n            int radius = cvRound((eyes[j].width + eyes[j].height) * 0.25);\r\n            circle(frame, eye_center, radius, Scalar(255, 0, 0), 4);\r\n        }\r\n    }\r\n\r\n    imshow("Capture - Face detection", frame);\r\n}\n'})}),"\n",(0,c.jsx)(r.p,{children:"Run Command:"}),"\n",(0,c.jsx)(r.pre,{children:(0,c.jsx)(r.code,{className:"language-bash",children:"./objectDetection --camera=0 \\\r\n--face_cascade=/usr/local/share/opencv4/haarcascades/haarcascade_frontalface_alt.xml \\\r\n--eyes_cascade=/usr/local/share/opencv4/haarcascades/haarcascade_eye_tree_eyeglasses.xml\n"})}),"\n",(0,c.jsxs)(r.p,{children:["Make sure the XML files are available in ",(0,c.jsx)(r.code,{children:"/usr/share/opencv4/haarcascades"})," or ",(0,c.jsx)(r.code,{children:"/usr/local/share/opencv4/haarcascades"}),"."]}),"\n",(0,c.jsx)(r.hr,{})]})}function m(e={}){const{wrapper:r}={...(0,i.R)(),...e.components};return r?(0,c.jsx)(r,{...e,children:(0,c.jsx)(d,{...e})}):d(e)}},8453:(e,r,n)=>{n.d(r,{R:()=>t,x:()=>s});var a=n(6540);const c={},i=a.createContext(c);function t(e){const r=a.useContext(i);return a.useMemo(function(){return"function"==typeof e?e(r):{...r,...e}},[r,e])}function s(e){let r;return r=e.disableParentContext?"function"==typeof e.components?e.components(c):e.components||c:t(e.components),a.createElement(i.Provider,{value:r},e.children)}}}]);